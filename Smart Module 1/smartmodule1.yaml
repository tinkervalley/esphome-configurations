esphome:
  name: smartmodule1
  friendly_name: Smart Module 1
  comment: "Garage Door control, Front Door sensor, Doorbell, and Furnace fan."

esp8266:
  board: nodemcuv2

# Enable logging
logger:

# Enable Home Assistant API
api:


ota:


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Smart Module 1 - Setup"

captive_portal:


#-----------------------------------------------------------
# Diagnostic Sensors
#-----------------------------------------------------------

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: WiFi SSD
    bssid:
      name: WiFi BSSID
    mac_address:
      name: MAC Address
    scan_results:
      name: Scan Results

sensor:
  - platform: wifi_signal
    name: WiFi Signal Strength
    id: wifi_signal_db
    update_interval: 60s


#-----------------------------------------------------------
# Components
#-----------------------------------------------------------
    

binary_sensor:
- platform: gpio
  id: garagedoorclosedsensor
  internal: true
  pin:
    number: D6
    inverted: true
    mode:
      input: true


- platform: gpio
  id: garagedooropensensor
  internal: true
  pin:
    number: D6
    mode:
      input: true


- platform: gpio
  id: frontdoorsensor
  name: Front Door
  device_class: door
  pin:
    number: D5
    inverted: false
    mode:
      input: true

- platform: gpio
  name: Doorbell
  device_class: occupancy
  icon: mdi:doorbell
  pin:
    number: D3
    inverted: true
    mode:
      input: true
    
switch:
- platform: gpio
  id: garagedoorswitch
  pin:
    number: D7
    inverted: true
  on_turn_on:
    - delay: 250ms
    - switch.turn_off: garagedoorswitch


output:
- platform: gpio
  id: fanoutput
  pin:
    number: D2
    inverted: true

fan:
  - platform: binary
    output: fanoutput
    id: fantemplate
    name: Fan



cover:
  - platform: template
    name: Garage Door
    id: garagedoor
    device_class: garage
    lambda:
      if (id(garagedoorclosedsensor).state) {
        return COVER_CLOSED;
      } else {
        return COVER_OPEN;
      }
    open_action:
      - switch.turn_on: garagedoorswitch
    close_action:
      if:
        condition:
          binary_sensor.is_on: garagedooropensensor
        then:
          switch.turn_on: garagedoorswitch
        else:
          - delay: 3s
          - cover.template.publish:
              id: garagedoor
              state: CLOSED
    stop_action:
      - switch.turn_on: garagedoorswitch



